/*
 * This source file was generated by the Gradle 'init' task
 */
package computer.heather.simpleconfig;

import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.io.TempDir;

import computer.heather.simpleconfig.exceptions.validation.MissingValueException;
import computer.heather.simpleconfig.managers.IConfigManager;
import computer.heather.simpleconfig.managers.PremadePropertiesManager;
import computer.heather.simpleconfig.types.BooleanValue;
import computer.heather.simpleconfig.types.FloatValue;
import computer.heather.simpleconfig.types.FreeStringValue;
import computer.heather.simpleconfig.types.LongValue;

import static org.junit.jupiter.api.Assertions.*;

import java.io.FileNotFoundException;
import java.nio.file.Path;

@SuppressWarnings("unused")
@TestMethodOrder(OrderAnnotation.class)
class PreMadePropertiesTests {

    /**
     * A temporary directory we can use for our tests.
     */
    @TempDir
    static Path tempDir;

    //Our test manager.
    final PremadePropertiesManager testManager = new PremadePropertiesManager().setConfigLocation(tempDir.resolve("unused"));
    
    //Our test config options.
    BooleanValue testBooleanValue = new BooleanValue("config.boolean.test", false, testManager);
    FloatValue testFloatValue = new FloatValue("config.float.test", 0F, -1F, 1F, testManager);
    FreeStringValue testFreeStringValue = new FreeStringValue("config.freestring.test", "Hello World!", testManager);
    LongValue testLongValue = new LongValue("config.long.test", 0L, -1L, 1L, testManager);

    /**
     * First, we test that attempting to load from a nonexistent file errors.
     */
    @Test
    @Order(1)
    void loadWithoutFileFails() {
        assertThrows(FileNotFoundException.class, testManager::load);
    }

    /**
     * Next, let's test that loading a config file with a missing key errors, and that an error handler safetly ignores it.
     */
    @Test 
    @Order(2)
    void testMissingKey() {

        //Create and save.
        testManager.setConfigLocation(tempDir.resolve("test-missingvalue.properties"))
                   .setPremadeLocation("test-missingvalue.properties");
        assertDoesNotThrow(testManager::save);

        //Now, test this.
        assertThrows(MissingValueException.class, testManager::load);

        //Now we give it an error handler that does nothing. This shouldn't throw at all.
        assertDoesNotThrow(() -> testManager.load((type, string, e) -> {assertInstanceOf(MissingValueException.class, e);}));
    }
}
